# Not Only Bitcoin Tips - Cursor AI Rules & Project Context

## PROJECT OVERVIEW
This is a decentralized crowdfunding DApp built on Internet Computer Protocol (ICP) that allows users to create fundraising campaigns with unique wallet addresses for donations. Each campaign generates a cryptographically secure account ID based on user principal and campaign ID.

## TECH STACK & ARCHITECTURE

### Backend (Internet Computer)
- **Language**: Motoko
- **Framework**: Internet Computer (IC) with DFX 0.28.0
- **Authentication**: Internet Identity
- **Storage**: Enhanced orthogonal persistence
- **Key Canister**: `user_canister` (backend/user_canister.mo)

### Frontend
- **Framework**: React 19.1.0 + TypeScript + Vite 7.0.4
- **Styling**: Tailwind CSS 4.1.11
- **Routing**: React Router Dom 7.7.1
- **IC Integration**: @dfinity/agent 3.1.0, @dfinity/auth-client 3.1.0
- **QR Codes**: qrcode.react 4.2.0



## CORE FUNCTIONALITY

### 1. Wallet System Architecture
**Each campaign has a unique ICP account ID generated as:**
```
account_id = CRC32(h) || h
where h = SHA224("\x0Aaccount-id" || user_principal || campaign_subaccount)
```

- **Frontend**: `account.ts` - Standards-compliant ICP account generation
- **Backend**: `generateAccountId()` function in user_canister.mo
- **Purpose**: Each campaign gets its own wallet for receiving ICP and ckBTC donations
- **Multi-token support**: Separate balance tracking for ICP and ckBTC

### 2. Campaign Lifecycle
1. **Authentication**: Internet Identity login → Principal ID
2. **User Registration**: `createUser(name, email?)` 
3. **Campaign Creation**: `createCampaign(name, description, acceptedTokens[])`
4. **Account Generation**: Automatic unique account ID creation
5. **Donations**: Direct ICP and ckBTC transfers to campaign account
6. **Balance Tracking**: Real-time balance updates every 10 seconds for all tokens
7. **Withdrawal**: Campaign owners can withdraw to personal wallets (ICP/ckBTC)



## DEVELOPMENT RULES & CONVENTIONS

### Motoko Backend Rules
1. **Use stable storage** for all persistent data (users, campaigns)
2. **Validate caller identity** for all update operations
3. **Error handling**: Use Result<T, Text> for operations that can fail
4. **Account ID generation**: Always use cryptographically secure methods
5. **Query vs Update**: Balance checks are queries, withdrawals are updates

### TypeScript/React Frontend Rules
1. **Strict TypeScript**: Enable all strict checks
2. **React 19 patterns**: Use modern hooks, avoid class components
3. **Async/await**: For all IC canister calls
4. **Error boundaries**: Wrap IC operations in try-catch
5. **Type safety**: Import proper types from declarations/

### ICP Integration Rules
1. **Environment handling**: Support local (localhost:4943) and mainnet (ic0.app)
2. **Identity management**: Always check authentication state
3. **Canister calls**: Use proper agent configuration
4. **Account IDs**: Always validate format before blockchain operations
5. **Gas fees**: Consider cycle costs for operations
6. **ckBTC integration**: Use proper ckBTC canister IDs for mainnet/local
7. **Multi-token support**: Handle both ICP and ckBTC operations consistently

## CRITICAL IMPLEMENTATION DETAILS



### Balance Tracking Strategy
- **Query calls**: Frontend polls balance every 10 seconds for all tokens
- **Update calls**: Only for withdrawals (expensive)
- **Error handling**: Graceful fallback to 0 balance on errors
- **Multi-token support**: Separate balance tracking for ICP and ckBTC
- **ckBTC integration**: Real-time ckBTC balance updates through ckBTC canister

### Security Considerations
1. **Principal validation**: Always verify caller identity
2. **Campaign ownership**: Only owners can withdraw funds
3. **Input sanitization**: Validate all user inputs
4. **Rate limiting**: Consider implementing for balance queries
5. **ckBTC security**: Validate Bitcoin addresses before withdrawal
6. **Multi-token validation**: Ensure proper token type validation
7. **Subaccount security**: Secure subaccount generation and validation

## ENVIRONMENT SETUP





### Canister IDs (Mainnet)
- **ckBTC Minter**: `mqygn-kiaaa-aaaar-qaadq-cai`
- **ckBTC Ledger**: `mxzaz-hqaaa-aaaar-qaada-cai`
- **ICP Ledger**: `ryjl3-tyaaa-aaaaa-aaaba-cai`

## TESTING STRATEGY
- **Candid UI**: http://127.0.0.1:4943/?canisterId=umunu-kh777-77774-qaaca-cai&id=uzt4z-lp777-77774-qaabq-cai
- **Internet Identity**: Local testing with temporary identities
- **Account generation**: Verify hex format and uniqueness
- **Balance simulation**: Use getRealAccountBalance vs getSimulatedBalance
- **ckBTC testing**: Test ckBTC deposit/withdrawal flows
- **Multi-token balance**: Verify separate balance tracking for ICP and ckBTC

## DEPLOYMENT
- **Local**: `dfx deploy` - testing only locally
- **Mainnet**: ICP Ninja automatically deploys when "Run" is clicked
- **IMPORTANT**: DO NOT attempt to deploy to mainnet manually - ICP Ninja handles this
- **Scripts**: Use scripts/deploy-to-mainnet.sh for production (only if needed)

## PROJECT LANGUAGE POLICY
**IMPORTANT: This project uses English as the primary language. All code, comments, documentation, commit messages, and user-facing text must be written in English.**

## CODING STYLE PREFERENCES
1. **English language**: All code comments, variable names, and documentation must be in English
2. **Descriptive naming**: Long, clear variable names over short ones
3. **Error messages**: Informative error handling with context in English
4. **Console logging**: Extensive logging for debugging in English
5. **Type annotations**: Explicit types even when inferred
6. **Always start your answer with which AI model was used to produce response** - show list of models if many
7. **Almost never use emoji symbols in code and docs** - only if necessary, keep style of docs professional
8. **When you finish and tested your changes in code - always make commit and don't forget to follow version changes rules described in this file**
9. **ckBTC naming**: Use clear prefixes like `ckBtcBalance`, `ckBtcAddress` for ckBTC variables
10. **Multi-token handling**: Consistent naming patterns for different token types



## PERFORMANCE CONSIDERATIONS
1. **Query calls**: Prefer query over update for read operations
2. **Batch updates**: Group related operations when possible
3. **Caching**: Cache campaign data and balance info appropriately
4. **Bundle size**: Monitor frontend bundle size with Vite analyzer
5. **ckBTC polling**: Optimize ckBTC balance updates to avoid excessive canister calls
6. **Multi-token balance**: Parallel balance fetching for better performance

## FUTURE ROADMAP
- **ckBTC Integration**: Full Bitcoin support through ckBTC canister
- **Real ICP Ledger integration**: Currently implemented, further optimizations
- **Multi-token support**: SNS tokens, ICRC-2, wrapped tokens (wETH, wBTC)
- **DeFi Integration**: Liquidity pools, yield farming, staking
- **Campaign analytics and statistics**: Real-time dashboard, donor analytics
- **Email/SMS notifications**: Automated donation alerts
- **Public API**: Balance verification and webhook system
- **Mobile responsive improvements**: Native mobile apps, mobile SDK
- **Cross-chain bridges**: Integration with other blockchains
- **Layer 2 solutions**: ICP Layer 2 scaling

This is a hackathon project built for ICP ecosystem, prioritizing rapid development while maintaining security and proper IC integration patterns.

## VERSION MANAGEMENT

### Semantic Versioning
- **MAJOR.MINOR.PATCH** format (e.g., 0.6.0)
- **MAJOR**: Breaking changes to API or core architecture
- **MINOR**: New features, significant improvements, or non-breaking changes
- **PATCH**: Bug fixes, minor improvements, documentation updates

### Version Update Rules
1. **VERSION file is the single source of truth** - always update it before making git commit
2. **Run `npm run update-version`** to sync version across all files
3. **Start commit messages with version number** (e.g., `v0.6.2:`)
4. **Version is automatically displayed in footer** from VERSION file
5. **Never manually edit version in MainApp.tsx** - use update script
6. **PATCH version increments**: Can go beyond 9 (10, 11, 12, etc.) - no automatic MINOR bump
7. **MINOR version changes**: Only when adding new features or significant improvements
8. **MAJOR version**: Manual changes only by user for breaking changes

### Git Tag Policy
- **When**: create tags only on explicit user request after a stable commit on `main`
- **Format**: annotated tags, `vX.Y.Z`
- **Source**: tag only from `main`, and only after `VERSION` is updated and pushed
- **Command**:
  - Create: `git tag -a vX.Y.Z -m "vX.Y.Z: stable snapshot" && git push origin vX.Y.Z`
  - Restore: `git switch -c restore/vX.Y.Z vX.Y.Z`
- **Note**: tags do not trigger mainnet deploys; ICP Ninja deploys via "Run"

### Commit Message Rules
1. **Language**: All commit messages must be written in English
2. **Format**: Start with version number (e.g., `v0.6.2:`)
3. **Style**: Use conventional commit format: `type: description`
4. **Examples**:
```
v0.6.0: feat: implement account ID generation
v0.5.3: fix: resolve wallet display issues  
v0.5.2: docs: update deployment guide
```

### Post-Commit Actions (MANDATORY)
**After every commit, you MUST push to origin/main:**
```bash
git push origin main
```
This ensures all changes are synchronized with the remote repository and available for deployment.

**IMPORTANT**: Never skip the push step - it's mandatory for every commit to maintain repository synchronization. 

## TESTING & COMMIT POLICY (MANDATORY)
1. **Before every commit:**
   - **MUST update `VERSION`** (pre-commit hook will auto-increment PATCH version if needed) and sync version across all files (script is already connected).
   - **MUST run full test suite** and achieve 100% success rate:
     - **Frontend E2E (Playwright)**: `cd frontend && npm run test:e2e` (or headed). If scenarios/UI changed — extend/update tests.
     - **API (user_canister) unit/integration** (when backend changes): `npm run test:api` — full coverage of methods and scenarios. Any backend change requires test case updates.
     - **ckBTC Integration**: Test ckBTC deposit/withdrawal flows and balances.
   - If changes are substantial, add/update scenarios (both frontend and API) before commit.
2. **Before writing new E2E scenarios**, use Playwright MCP for quick interactive UI verification and artifact collection (screenshots/network) — this speeds up test development. MCP connection example: see `~/.cursor/mcp.json` with `playwright` server.
3. **In CI/pre-push** (when connected): block push if any tests fail or version mismatch exists.
4. **ckBTC Testing Requirements**: All ckBTC-related changes must include tests for:
   - ckBTC deposits to campaign addresses
   - ckBTC balance retrieval
   - ckBTC withdrawals from campaigns
   - ckBTC operation error handling 