type UserId = principal;
type User = 
 record {
   createdAt: Time;
   email: opt text;
   id: UserId;
   name: text;
 };
type Time = int;
type CampaignId = text;
type Campaign = 
 record {
   acceptedTokens: vec text;
   createdAt: Time;
   description: text;
   id: CampaignId;
   name: text;
   owner: UserId;
 };
service : {
  clearUsers: () -> ();
  createCampaign: (name: text, description: text, acceptedTokens:
   vec text) -> (text);
  createUser: (name: text, email: opt text) -> (bool);
  debugCompare: (userId: principal) ->
   (vec record {
          text;
          principal;
          bool;
        }) query;
  debugPrincipal: (userId: principal) -> (text) query;
  getAllCampaigns: () -> (vec Campaign) query;
  getAllUsers: () -> (vec User) query;
  getCampaign: (id: CampaignId) -> (opt Campaign) query;
  getUserCampaigns: (userIdText: text) -> (vec Campaign) query;
  userExists: () -> (bool) query;
  whoami: () -> (principal) query;
}
