type UserId = principal;
type UserCanister = 
 service {
   clearUsers: () -> ();
   createCampaign: (name: text, description: text, acceptedTokens:
    vec text) -> (text);
   createUser: (name: text, email: opt text) -> (bool);
   debugCompare: (userId: UserId) ->
    (vec record {
           text;
           principal;
           bool;
         }) query;
   debugPrincipal: (userId: UserId) -> (text) query;
   getAllCampaigns: () -> (vec Campaign) query;
   getAllUsers: () -> (vec User) query;
   getCampaign: (id: text) -> (opt Campaign) query;
   getCampaignSubaccount: (id: text) -> (opt blob) query;
   getPrincipal: () -> (principal) query;
   getUserCampaigns: (userId: UserId) -> (vec Campaign) query;
   userExists: () -> (bool) query;
   whoami: () -> (principal);
 };
type User = 
 record {
   createdAt: nat64;
   email: opt text;
   id: UserId;
   name: text;
 };
type CampaignId = text;
type Campaign = 
 record {
   acceptedTokens: vec text;
   createdAt: nat64;
   description: text;
   id: CampaignId;
   name: text;
   owner: UserId;
   subaccount: blob;
 };
service : () -> UserCanister
