#!/usr/bin/env node

// –¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ICP –æ–ø–µ—Ä–∞—Ü—ñ–π
const { Actor, HttpAgent } = require('@dfinity/agent');
const { Principal } = require('@dfinity/principal');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const LEDGER_CANISTER_ID = "ulvla-h7777-77774-qaacq-cai";
const USER_CANISTER_ID = "uzt4z-lp777-77774-qaabq-cai";
const HOST = "http://127.0.0.1:4943";

// –ü—Ä–æ—Å—Ç–∏–π IDL –¥–ª—è ledger
const ledgerIdl = ({ IDL }) => {
  return IDL.Service({
    'account_balance_dfx': IDL.Func([IDL.Record({ 'account': IDL.Text })], [IDL.Record({ 'e8s': IDL.Nat64 })], ['query']),
    'transfer': IDL.Func([
      IDL.Record({
        'memo': IDL.Nat64,
        'amount': IDL.Record({ 'e8s': IDL.Nat64 }),
        'fee': IDL.Record({ 'e8s': IDL.Nat64 }),
        'from_subaccount': IDL.Opt(IDL.Vec(IDL.Nat8)),
        'to': IDL.Vec(IDL.Nat8),
        'created_at_time': IDL.Opt(IDL.Record({ 'timestamp_nanos': IDL.Nat64 }))
      })
    ], [IDL.Variant({ 'Ok': IDL.Nat64, 'Err': IDL.Text })], []),
    'total_supply': IDL.Func([], [IDL.Record({ 'e8s': IDL.Nat64 })], ['query']),
    'symbol': IDL.Func([], [IDL.Text], ['query']),
    'name': IDL.Func([], [IDL.Text], ['query']),
    'decimals': IDL.Func([], [IDL.Nat8], ['query'])
  });
};

async function testLedger() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ ICP Ledger...');
  
  try {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–≥–µ–Ω—Ç
    const agent = new HttpAgent({ host: HOST });
    await agent.fetchRootKey();
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–∫—Ç–æ—Ä –¥–ª—è ledger
    const ledger = Actor.createActor(ledgerIdl, {
      agent,
      canisterId: LEDGER_CANISTER_ID,
    });
    
    console.log('‚úÖ Ledger canister –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
    
    // –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
    const testAccount = "a84c477c0a626566737a747b35726e0f3d444347434849434a4c4d504d514b4c";
    console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –¥–ª—è account: ${testAccount}`);
    
    const balance = await ledger.account_balance_dfx({ account: testAccount });
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${balance.e8s} e8s (${Number(balance.e8s) / 100_000_000} ICP)`);
    
    // –¢–µ—Å—Ç—É—î–º–æ transfer
    console.log('üîÑ –¢–µ—Å—Ç—É—î–º–æ transfer...');
    const transferResult = await ledger.transfer({
      memo: 12345n,
      amount: { e8s: 1000000n }, // 0.01 ICP
      fee: { e8s: 10000n }, // 0.0001 ICP
      from_subaccount: [],
      to: [1, 2, 3, 4, 5], // –¢–µ—Å—Ç–æ–≤–∏–π –∞–¥—Ä–µ—Å
      created_at_time: [{ timestamp_nanos: BigInt(Date.now()) * 1_000_000n }]
    });
    
    console.log('üì§ Transfer —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', transferResult);
    
    // –¢–µ—Å—Ç—É—î–º–æ —ñ–Ω—à—ñ –º–µ—Ç–æ–¥–∏
    const symbol = await ledger.symbol();
    const name = await ledger.name();
    const decimals = await ledger.decimals();
    const totalSupply = await ledger.total_supply();
    
    console.log(`üìä Symbol: ${symbol}`);
    console.log(`üìä Name: ${name}`);
    console.log(`üìä Decimals: ${decimals}`);
    console.log(`üìä Total Supply: ${totalSupply.e8s} e8s (${Number(totalSupply.e8s) / 100_000_000} ICP)`);
    
    console.log('‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
testLedger();
