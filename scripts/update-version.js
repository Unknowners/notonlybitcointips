#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞—î–º–æ –≤–µ—Ä—Å—ñ—é –∑ VERSION —Ñ–∞–π–ª—É
const versionFile = path.join(__dirname, '..', 'VERSION');
const version = fs.readFileSync(versionFile, 'utf8').trim();

console.log(`üîÑ –û–Ω–æ–≤–ª—é—é –≤–µ—Ä—Å—ñ—é ${version} –≤ —É—Å—ñ—Ö —Ñ–∞–π–ª–∞—Ö...`);

// –§–∞–π–ª–∏ –¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ –≤–µ—Ä—Å—ñ—é
const filesToUpdate = [
  'frontend/src/MainApp.tsx',
  'package.json',
  'frontend/package.json'
];

filesToUpdate.forEach(filePath => {
  const fullPath = path.join(__dirname, '..', filePath);
  
  if (fs.existsSync(fullPath)) {
    let content = fs.readFileSync(fullPath, 'utf8');
    
    if (filePath.includes('MainApp.tsx')) {
      // –û–Ω–æ–≤–ª—é—î–º–æ –≤–µ—Ä—Å—ñ—é –≤ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ
      content = content.replace(
        /Version \d+\.\d+\.\d+/g,
        `Version ${version}`
      );
    } else if (filePath.includes('package.json')) {
      // –û–Ω–æ–≤–ª—é—î–º–æ –≤–µ—Ä—Å—ñ—é –≤ package.json
      content = content.replace(
        /"version": "\d+\.\d+\.\d+"/g,
        `"version": "${version}"`
      );
    }
    
    fs.writeFileSync(fullPath, content);
    console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: ${filePath}`);
  } else {
    console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${filePath}`);
  }
});

console.log(`üéâ –í–µ—Ä—Å—ñ—è ${version} –æ–Ω–æ–≤–ª–µ–Ω–∞ –≤ —É—Å—ñ—Ö —Ñ–∞–π–ª–∞—Ö!`); 